{"ast":null,"code":"import _defineProperty from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar datePartsToObject = function datePartsToObject(acc, _ref) {\n  var type = _ref.type,\n      value = _ref.value;\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, type, value));\n};\n\nvar newDateTimeFormat = function newDateTimeFormat(options) {\n  return new Intl.DateTimeFormat(process.env.locale, options);\n};\n\nexport var formatToDate = function formatToDate(date) {\n  return newDateTimeFormat({\n    weekday: 'long',\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  }).format(date);\n};\nexport var formatToLongDateTime = function formatToLongDateTime(date) {\n  var _newDateTimeFormat$fo = newDateTimeFormat({\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  }).formatToParts(date).reduce(datePartsToObject, {}),\n      month = _newDateTimeFormat$fo.month,\n      day = _newDateTimeFormat$fo.day,\n      year = _newDateTimeFormat$fo.year,\n      hour = _newDateTimeFormat$fo.hour,\n      minute = _newDateTimeFormat$fo.minute,\n      dayPeriod = _newDateTimeFormat$fo.dayPeriod;\n\n  return \"\".concat(month, \" \").concat(day, \", \").concat(year, \" at \").concat(hour, \":\").concat(minute, \" \").concat(dayPeriod);\n};\nexport var formatToShortDateTime = function formatToShortDateTime(date) {\n  var _newDateTimeFormat$fo2 = newDateTimeFormat({\n    year: 'numeric',\n    day: '2-digit',\n    month: '2-digit'\n  }).formatToParts(date).reduce(datePartsToObject, {}),\n      year = _newDateTimeFormat$fo2.year,\n      month = _newDateTimeFormat$fo2.month,\n      day = _newDateTimeFormat$fo2.day;\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n};\nexport var formatToTime = function formatToTime(date) {\n  return newDateTimeFormat({\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: true\n  }).format(date);\n};\nexport var isMidnight = function isMidnight(time) {\n  var hour12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return time === (hour12 ? '12:00:00 AM' : '00:00:00');\n};\nexport var newDate = function newDate() {\n  return new Date();\n};","map":null,"metadata":{},"sourceType":"module"}