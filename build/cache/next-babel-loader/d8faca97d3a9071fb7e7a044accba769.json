{"ast":null,"code":"import { baseZindex, foregroundZindex, MAXIMIZE_ANIMATION_SPEED_IN_SECONDS, MILLISECONDS_IN_SECOND, TASKBAR_HEIGHT, windowsZindexLevel, zindexLevelSize } from '@/utils/constants';\nimport { getMaxDimensions, getNextVisibleWindow } from '@/utils/windowmanager';\nimport { ProcessContext } from '@/contexts/ProcessManager';\nimport { SessionContext } from '@/contexts/SessionManager';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { windowMotionSettings } from '@/utils/motions';\nvar windowZindex = baseZindex + windowsZindexLevel * zindexLevelSize;\n\nvar useWindow = function useWindow(_ref) {\n  var _ref$loaderOptions = _ref.loaderOptions,\n      defaultWidth = _ref$loaderOptions.width,\n      defaultHeight = _ref$loaderOptions.height,\n      _ref$processProps = _ref.processProps,\n      initialHeight = _ref$processProps.height,\n      id = _ref$processProps.id,\n      launchElement = _ref$processProps.launchElement,\n      lockAspectRatio = _ref$processProps.lockAspectRatio,\n      maximized = _ref$processProps.maximized,\n      minimized = _ref$processProps.minimized,\n      taskbarElement = _ref$processProps.taskbarElement,\n      initialWidth = _ref$processProps.width,\n      x = _ref$processProps.x,\n      y = _ref$processProps.y;\n\n  var _useContext = useContext(SessionContext),\n      foreground = _useContext.foreground,\n      getState = _useContext.getState,\n      saveState = _useContext.saveState,\n      _useContext$session = _useContext.session,\n      foregroundId = _useContext$session.foregroundId,\n      stackOrder = _useContext$session.stackOrder;\n\n  var _useContext2 = useContext(ProcessContext),\n      processes = _useContext2.processes,\n      close = _useContext2.close,\n      maximize = _useContext2.maximize,\n      minimize = _useContext2.minimize,\n      position = _useContext2.position,\n      restore = _useContext2.restore,\n      size = _useContext2.size;\n\n  var _useState = useState(false),\n      maximizeWindow = _useState[0],\n      setMaximizeWindow = _useState[1];\n\n  var _getMaxDimensions = getMaxDimensions(initialWidth, initialHeight, defaultWidth, defaultHeight, lockAspectRatio),\n      height = _getMaxDimensions.height,\n      width = _getMaxDimensions.width;\n\n  var _getState = getState({\n    id: id\n  }),\n      previousX = _getState.x,\n      previousY = _getState.y;\n\n  var _useMemo = useMemo(function () {\n    return {\n      x: Math.floor((window.innerWidth - width) / 2),\n      y: Math.floor((window.innerHeight - height - TASKBAR_HEIGHT) / 2)\n    };\n  }, []),\n      defaultX = _useMemo.x,\n      defaultY = _useMemo.y;\n\n  var zIndex = windowZindex + stackOrder.slice().reverse().indexOf(id);\n  useEffect(function () {\n    if (foregroundId === id && minimized) {\n      foreground(getNextVisibleWindow(processes, stackOrder.filter(function (stackId) {\n        return stackId !== id;\n      })));\n    } else if (!stackOrder.includes(id)) {\n      foreground(getNextVisibleWindow(processes, stackOrder));\n    }\n  }, [foregroundId, id, minimized, processes, stackOrder]);\n  useEffect(function () {\n    if (maximized) {\n      setMaximizeWindow(true);\n    } else if (maximizeWindow) {\n      setTimeout(function () {\n        return setMaximizeWindow(false);\n      }, MAXIMIZE_ANIMATION_SPEED_IN_SECONDS * MILLISECONDS_IN_SECOND);\n    }\n  }, [maximized, maximizeWindow]);\n  return {\n    height: height,\n    width: width,\n    zIndex: foregroundId === id ? foregroundZindex : zIndex,\n    motions: windowMotionSettings({\n      animation: maximized && minimized && 'maxmin' || maximized && 'maximized' || minimized && 'minimized' || 'start',\n      initialX: previousX || defaultX,\n      initialY: previousY || defaultY,\n      x: x,\n      y: y,\n      taskbarElement: taskbarElement,\n      launchElement: launchElement,\n      height: height,\n      width: width,\n      zIndex: zIndex\n    }),\n    settings: {\n      onBlur: function onBlur(event) {\n        if (event.relatedTarget !== taskbarElement) {\n          foreground('');\n        }\n      },\n      onClose: function onClose() {\n        saveState({\n          id: id,\n          height: height,\n          width: width,\n          x: !previousX ? defaultX + x : x,\n          y: !previousY ? defaultY + y : y\n        });\n        close(id);\n      },\n      onDrag: position(id),\n      onFocus: function onFocus() {\n        return foreground(id);\n      },\n      onMaximize: function onMaximize() {\n        return maximized ? restore(id, 'maximized') : maximize(id);\n      },\n      onMinimize: function onMinimize() {\n        return minimize(id);\n      },\n      onResize: size(id),\n      height: height,\n      id: id,\n      lockAspectRatio: lockAspectRatio,\n      maximized: maximizeWindow,\n      minimized: minimized,\n      width: width,\n      zIndex: zIndex\n    }\n  };\n};\n\nexport default useWindow;","map":null,"metadata":{},"sourceType":"module"}