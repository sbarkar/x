{"ast":null,"code":"import _defineProperty from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { appLoader } from '@/utils/programs';\nimport { basename, extname } from 'path';\nimport { getFileIcon } from '@/utils/file';\nimport { getProcessId, Process } from '@/utils/process';\nvar singleInstanceApps = ['dos'];\n\nvar addProcess = function addProcess(process, processes) {\n  var previousState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return [].concat(_toConsumableArray(processes), [_objectSpread(_objectSpread({}, process), previousState)]);\n};\n\nvar removeProcess = function removeProcess(id, processes) {\n  return processes.filter(function (process) {\n    return process.id !== id;\n  });\n};\n\nvar updateProcess = function updateProcess(id, updates, processes) {\n  return processes.map(function (process) {\n    return process.id === id ? _objectSpread(_objectSpread({}, process), updates) : process;\n  });\n};\n\nexport var processReducer = function processReducer(processes, _ref) {\n  var id = _ref.id,\n      process = _ref.process,\n      updates = _ref.updates,\n      previousState = _ref.previousState;\n  if (id && updates) return updateProcess(id, updates, processes);\n  if (process) return addProcess(process, processes, previousState);\n  if (id) return removeProcess(id, processes);\n  return processes;\n};\nexport var close = function close(updateProcesses) {\n  return function (id) {\n    return updateProcesses({\n      id: id\n    });\n  };\n};\nexport var maximize = function maximize(updateProcesses) {\n  return function (id) {\n    return updateProcesses({\n      updates: {\n        maximized: true\n      },\n      id: id\n    });\n  };\n};\nexport var minimize = function minimize(updateProcesses) {\n  return function (id) {\n    return updateProcesses({\n      updates: {\n        minimized: true\n      },\n      id: id\n    });\n  };\n};\nexport var open = function open(processes, updateProcesses) {\n  return function (appFile, previousState, launchElement) {\n    var appName = appFile.appName,\n        icon = appFile.icon,\n        name = appFile.name,\n        url = appFile.url;\n    var existingProcessId = getProcessId(appName || name);\n    var singleInstanceApp = singleInstanceApps.includes(existingProcessId);\n\n    if (!singleInstanceApp && processes.find(function (_ref2) {\n      var processId = _ref2.id;\n      return processId === existingProcessId;\n    })) {\n      if (appName !== name) {\n        updateProcesses({\n          updates: {\n            url: url\n          },\n          id: existingProcessId\n        });\n      }\n\n      return existingProcessId;\n    }\n\n    var loader = appLoader(appFile);\n\n    if (loader) {\n      var process = new Process(_objectSpread({\n        loader: loader,\n        icon: icon,\n        name: singleInstanceApp ? name : appName || name,\n        launchElement: launchElement\n      }, loader.loaderOptions));\n      updateProcesses({\n        process: process,\n        previousState: previousState\n      });\n      return process.id;\n    }\n\n    return '';\n  };\n};\nexport var load = function load(processes, updateProcesses) {\n  return function (file, previousState, launchElement) {\n    return new Promise(function (resolve) {\n      var fileReader = new FileReader();\n      fileReader.addEventListener('loadend', function () {\n        var url = URL.createObjectURL(new Blob([new Uint8Array(fileReader.result)]));\n        var ext = extname(file.name).toLowerCase();\n        resolve(open(processes, updateProcesses)({\n          icon: getFileIcon('', ext),\n          name: basename(file.name, ext),\n          ext: ext,\n          url: url\n        }, previousState, launchElement));\n      });\n      fileReader.readAsArrayBuffer(file);\n    });\n  };\n};\nexport var position = function position(updateProcesses) {\n  return function (id) {\n    return function (_event, _ref3) {\n      var x = _ref3.x,\n          y = _ref3.y;\n      return updateProcesses({\n        id: id,\n        updates: {\n          x: x,\n          y: y\n        }\n      });\n    };\n  };\n};\nexport var restore = function restore(updateProcesses) {\n  return function (id, key) {\n    return updateProcesses({\n      updates: _defineProperty({}, key, false),\n      id: id\n    });\n  };\n};\nexport var size = function size(updateProcesses) {\n  return function (id) {\n    return function (_event, _direction, _ref4, _delta, _ref5) {\n      var width = _ref4.offsetWidth,\n          height = _ref4.offsetHeight;\n      var x = _ref5.x,\n          y = _ref5.y;\n      return updateProcesses({\n        id: id,\n        updates: {\n          height: height,\n          width: width,\n          x: x,\n          y: y\n        }\n      });\n    };\n  };\n};\nexport var taskbarElement = function taskbarElement(updateProcesses) {\n  return function (id, element) {\n    updateProcesses({\n      updates: {\n        taskbarElement: element\n      },\n      id: id\n    });\n  };\n};\nexport var title = function title(updateProcesses) {\n  return function (id) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return updateProcesses({\n      updates: {\n        name: name\n      },\n      id: id\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}