{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styles from '@/styles/Programs/Winamp.module.scss';\nimport { appendElement, focusOnDrag, focusResizableElementRef } from '@/utils/elements';\nimport { closeEqualizer, loadTrackOrSkin, touchControls, webampOptions } from '@/utils/winamp';\nimport { onTouchEventsOnly } from '@/utils/events';\nimport { Rnd } from 'react-rnd';\nimport { useEffect, useRef, useState } from 'react';\nconst defaultDimensions = {\n  height: 232,\n  width: 275\n};\n\nconst getWebamp = () => document.getElementById('webamp');\n\nconst Winamp = ({\n  onBlur,\n  onClose,\n  onMinimize,\n  onFocus,\n  onDrag,\n  zIndex,\n  url: appUrl,\n  file: {\n    url = '',\n    name = ''\n  } = {}\n}) => {\n  const {\n    0: webampLib,\n    1: setWebampLib\n  } = useState();\n  const {\n    0: closing,\n    1: setClosing\n  } = useState(false);\n  const elementRef = useRef(null);\n  const dragContainerRef = useRef(null);\n\n  const loadWebamp = async () => {\n    const {\n      default: WebampConstructor\n    } = await import('webamp');\n    const webamp = new WebampConstructor(webampOptions);\n    const {\n      current: containerElement\n    } = elementRef;\n    webamp.onWillClose(() => setClosing(true));\n    if (onMinimize) webamp.onMinimize(onMinimize);\n    closeEqualizer(webamp);\n    await webamp.renderWhenReady(containerElement);\n    appendElement(containerElement, getWebamp());\n    focusResizableElementRef(dragContainerRef);\n    loadTrackOrSkin(webamp, url, name);\n    return webamp;\n  };\n\n  useEffect(() => {\n    const tryDispose = () => {\n      try {\n        webampLib === null || webampLib === void 0 ? void 0 : webampLib.dispose();\n      } catch (_exception) {\n        /* eslint no-empty: off */\n      }\n    };\n\n    loadWebamp().then(loadedWebamp => {\n      setWebampLib(loadedWebamp);\n    });\n    return tryDispose;\n  }, []);\n  useEffect(() => {\n    if (closing) {\n      setClosing(false);\n      onClose();\n    }\n  }, [closing, onClose]);\n  useEffect(() => {\n    if (appUrl && webampLib) {\n      loadTrackOrSkin(webampLib, appUrl, name);\n    }\n  }, [appUrl, webampLib]);\n  return /*#__PURE__*/_jsx(Rnd, {\n    className: styles.winamp,\n    cancel: touchControls,\n    dragHandleClassName: \"draggable\",\n    enableResizing: false,\n    enableUserSelectHack: false,\n    onBlur: onBlur,\n    onDrag: onTouchEventsOnly,\n    onDragStart: focusOnDrag,\n    onDragStop: onDrag,\n    onFocus: onFocus,\n    style: {\n      zIndex\n    },\n    ref: dragContainerRef,\n    tabIndex: -1,\n    children: /*#__PURE__*/_jsx(\"article\", {\n      ref: elementRef\n    })\n  });\n};\n\nexport default Winamp;\nexport const loaderOptions = _objectSpread({\n  windowed: false\n}, defaultDimensions);","map":null,"metadata":{},"sourceType":"module"}