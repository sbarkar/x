{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst saveState = (session, state) => _objectSpread(_objectSpread({}, session), {}, {\n  states: _objectSpread(_objectSpread({}, session.states), {}, {\n    [state.id]: state\n  }),\n  stackOrder: session.stackOrder.filter(stackId => stackId !== state.id)\n});\n\nconst changeForground = (session, foregroundId) => _objectSpread(_objectSpread({}, session), {}, {\n  foregroundId,\n  stackOrder: [...(foregroundId ? [foregroundId] : []), ...session.stackOrder.filter(stackId => stackId !== foregroundId)]\n});\n\nexport const sessionReducer = (session, {\n  foregroundId,\n  state\n}) => {\n  if (state) return saveState(session, state);\n  if (typeof foregroundId === 'string') return changeForground(session, foregroundId);\n  return session;\n};","map":null,"metadata":{},"sourceType":"module"}