{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { appLoader } from '@/utils/programs';\nimport { basename, extname } from 'path';\nimport { getFileIcon } from '@/utils/file';\nimport { getProcessId, Process } from '@/utils/process';\nconst singleInstanceApps = ['dos'];\n\nconst addProcess = (process, processes, previousState = {}) => [...processes, _objectSpread(_objectSpread({}, process), previousState)];\n\nconst removeProcess = (id, processes) => processes.filter(process => process.id !== id);\n\nconst updateProcess = (id, updates, processes) => processes.map(process => process.id === id ? _objectSpread(_objectSpread({}, process), updates) : process);\n\nexport const processReducer = (processes, {\n  id,\n  process,\n  updates,\n  previousState\n}) => {\n  if (id && updates) return updateProcess(id, updates, processes);\n  if (process) return addProcess(process, processes, previousState);\n  if (id) return removeProcess(id, processes);\n  return processes;\n};\nexport const close = updateProcesses => id => updateProcesses({\n  id\n});\nexport const maximize = updateProcesses => id => updateProcesses({\n  updates: {\n    maximized: true\n  },\n  id\n});\nexport const minimize = updateProcesses => id => updateProcesses({\n  updates: {\n    minimized: true\n  },\n  id\n});\nexport const open = (processes, updateProcesses) => (appFile, previousState, launchElement) => {\n  const {\n    appName,\n    icon,\n    name,\n    url\n  } = appFile;\n  const existingProcessId = getProcessId(appName || name);\n  const singleInstanceApp = singleInstanceApps.includes(existingProcessId);\n\n  if (!singleInstanceApp && processes.find(({\n    id: processId\n  }) => processId === existingProcessId)) {\n    if (appName !== name) {\n      updateProcesses({\n        updates: {\n          url\n        },\n        id: existingProcessId\n      });\n    }\n\n    return existingProcessId;\n  }\n\n  const loader = appLoader(appFile);\n\n  if (loader) {\n    const process = new Process(_objectSpread({\n      loader,\n      icon,\n      name: singleInstanceApp ? name : appName || name,\n      launchElement\n    }, loader.loaderOptions));\n    updateProcesses({\n      process,\n      previousState\n    });\n    return process.id;\n  }\n\n  return '';\n};\nexport const load = (processes, updateProcesses) => (file, previousState, launchElement) => {\n  return new Promise(resolve => {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('loadend', () => {\n      const url = URL.createObjectURL(new Blob([new Uint8Array(fileReader.result)]));\n      const ext = extname(file.name).toLowerCase();\n      resolve(open(processes, updateProcesses)({\n        icon: getFileIcon('', ext),\n        name: basename(file.name, ext),\n        ext,\n        url\n      }, previousState, launchElement));\n    });\n    fileReader.readAsArrayBuffer(file);\n  });\n};\nexport const position = updateProcesses => id => (_event, {\n  x,\n  y\n}) => updateProcesses({\n  id,\n  updates: {\n    x,\n    y\n  }\n});\nexport const restore = updateProcesses => (id, key) => updateProcesses({\n  updates: {\n    [key]: false\n  },\n  id\n});\nexport const size = updateProcesses => id => (_event, _direction, {\n  offsetWidth: width,\n  offsetHeight: height\n}, _delta, {\n  x,\n  y\n}) => updateProcesses({\n  id,\n  updates: {\n    height,\n    width,\n    x,\n    y\n  }\n});\nexport const taskbarElement = updateProcesses => (id, element) => {\n  updateProcesses({\n    updates: {\n      taskbarElement: element\n    },\n    id\n  });\n};\nexport const title = updateProcesses => (id, name = '') => updateProcesses({\n  updates: {\n    name\n  },\n  id\n});","map":null,"metadata":{},"sourceType":"module"}