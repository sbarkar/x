{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { foregroundZindex, MAXIMIZE_ANIMATION_SPEED_IN_SECONDS, TASKBAR_HEIGHT } from '@/utils/constants';\nimport { getTargetCenterPosition, getTargetCenterImagePosition } from '@/utils/elements';\nexport const desktopIconDragSettings = {\n  dragElastic: 0.25,\n  dragTransition: {\n    bounceStiffness: 500,\n    bounceDamping: 15\n  },\n  dragMomentum: false\n};\nexport const desktopIconMotionSettings = {\n  initial: {\n    opacity: 0,\n    y: -100\n  },\n  animate: {\n    opacity: 1,\n    y: 0\n  },\n  transition: {\n    y: {\n      type: 'spring'\n    }\n  }\n};\nexport const startMenuEntriesMotionSettings = {\n  initial: {\n    opacity: 0\n  },\n  animate: {\n    opacity: 1\n  }\n};\nexport const taskbarEntriesMotionSettings = {\n  initial: {\n    opacity: 0,\n    x: -100\n  },\n  animate: {\n    opacity: 1,\n    x: 0\n  },\n  transition: {\n    x: {\n      type: 'spring'\n    }\n  },\n  exit: {\n    opacity: 0,\n    width: 0,\n    transition: {\n      duration: 0.3\n    },\n    x: -100\n  }\n};\nexport const windowMotionSettings = ({\n  initialX = 0,\n  initialY = 0,\n  animation = 'start',\n  height,\n  width,\n  x,\n  y,\n  taskbarElement,\n  launchElement,\n  zIndex\n}) => {\n  const exitZIndex = foregroundZindex + 1;\n  const widthOffset = -Math.floor(width / 2);\n  const heightOffset = -Math.floor(height / 2);\n  const {\n    x: taskbarElementX,\n    y: taskbarElementY\n  } = getTargetCenterPosition(taskbarElement);\n  let {\n    x: launchElementX,\n    y: launchElementY\n  } = getTargetCenterImagePosition(launchElement);\n\n  if (launchElementX === 0) {\n    launchElementX = window.innerWidth / 2;\n  }\n\n  if (launchElementY === 0) {\n    launchElementY = window.innerHeight / 2;\n  }\n\n  const baseTransform = {\n    scale: 0,\n    x: widthOffset + launchElementX,\n    y: heightOffset + launchElementY\n  };\n  const maximizedExitTransform = {\n    scale: 0,\n    x: -(window.innerWidth / 2) + launchElementX,\n    y: -(window.innerHeight / 2) + launchElementY\n  };\n  const animationVariants = {\n    start: {\n      scale: 1,\n      x: initialX,\n      y: initialY,\n      height,\n      width,\n      zIndex\n    },\n    maximized: {\n      scale: 1,\n      x: initialX === x ? 0 : -x,\n      y: initialY === y ? 0 : -y,\n      height: window.innerHeight - TASKBAR_HEIGHT,\n      width: '100vw',\n      zIndex\n    },\n    minimized: {\n      scale: 0,\n      x: widthOffset + taskbarElementX,\n      y: heightOffset + taskbarElementY,\n      zIndex: exitZIndex\n    },\n    maxmin: {\n      scale: 0,\n      x: -(window.innerWidth / 2) + taskbarElementX,\n      y: -(window.innerHeight / 2) + taskbarElementY,\n      zIndex: exitZIndex\n    }\n  };\n  return {\n    initial: baseTransform,\n    exit: _objectSpread(_objectSpread({}, animation === 'maximized' ? maximizedExitTransform : baseTransform), {}, {\n      zIndex: exitZIndex\n    }),\n    animate: animationVariants[animation],\n    transition: {\n      duration: MAXIMIZE_ANIMATION_SPEED_IN_SECONDS\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}