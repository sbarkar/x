{"ast":null,"code":"import { extname } from 'path';\nimport { getFileIcon, getFileKind, getFileStat, getFormattedSize } from '@/utils/file';\nimport { parseShortcut } from '@/utils/shortcut';\nimport { ROOT_DIRECTORY } from '@/utils/constants';\n\nconst getBestIconMatch = (icon, isDirectory, ext, filePath) => {\n  if (icon) return icon;\n  return isDirectory ? '/icons/programs/explorer.png' : getFileIcon(filePath, ext);\n};\n\nexport const getDirectoryEntry = async (fs, path, file, getStats) => {\n  const filePath = `${path}${path === ROOT_DIRECTORY ? '' : ROOT_DIRECTORY}${file}`;\n  const ext = extname(file);\n  const isDirectory = !ext;\n  const stats = !isDirectory && getStats ? getFileStat(filePath) : {};\n  const isShortcut = !isDirectory && file.includes('.url');\n  const {\n    url,\n    icon\n  } = isShortcut ? await parseShortcut(fs, filePath) : {};\n  return {\n    name: file.replace(ext, ''),\n    fullName: file,\n    path: filePath,\n    url: url && decodeURIComponent(url),\n    icon: getBestIconMatch(icon, isDirectory, ext, filePath),\n    size: isDirectory ? '--' : getFormattedSize(stats.size || 0),\n    kind: isDirectory ? 'Folder' : getFileKind(ext)\n  };\n};\nexport const getDirectory = (fs, path, getDetails, cb) => {\n  var _fs$readdir;\n\n  fs === null || fs === void 0 ? void 0 : (_fs$readdir = fs.readdir) === null || _fs$readdir === void 0 ? void 0 : _fs$readdir.call(fs, path, (_error, contents = []) => {\n    contents.reduce(async (entries, file) => {\n      const newEntries = [...(await entries), await getDirectoryEntry(fs, path, file, getDetails)];\n      cb(newEntries);\n      return newEntries;\n    }, Promise.resolve([]));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}