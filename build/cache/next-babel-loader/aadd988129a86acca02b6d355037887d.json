{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extname, resolve } from 'path';\nimport { FileContext } from '@/contexts/FileSystem';\nimport { getAppNameByExtension } from '@/utils/programs';\nimport { getDirectory, getDirectoryEntry } from '@/utils/filemanager';\nimport { ProcessContext } from '@/contexts/ProcessManager';\nimport { SessionContext } from '@/contexts/SessionManager';\nimport { useContext, useEffect, useState } from 'react';\nimport { useFileDrop } from '@/utils/events';\n\nconst FileManager = ({\n  path: directoryPath,\n  render,\n  details = false,\n  onChange\n}) => {\n  const {\n    0: cwd,\n    1: cd\n  } = useState(directoryPath);\n  const {\n    0: entries,\n    1: setEntries\n  } = useState([]);\n  const fs = useContext(FileContext);\n  const {\n    load,\n    open\n  } = useContext(ProcessContext);\n  const {\n    foreground,\n    getState\n  } = useContext(SessionContext);\n  const fileDropHandler = useFileDrop(async (dragEvent, file) => {\n    const processsId = await load(file, getState({\n      name: file.name\n    }), dragEvent.target);\n    foreground(processsId);\n    fs.writeFile(`${cwd}/${file.name}`, file);\n    setEntries([...entries, await getDirectoryEntry(fs, cwd, file.name, details)]);\n  });\n\n  const onDoubleClick = ({\n    path,\n    url,\n    icon = '',\n    name = ''\n  }) => event => {\n    if (path && !path.includes('.url') && (path === '..' || !extname(path))) {\n      cd(path === '..' ? resolve(cwd, '..') : path);\n    } else {\n      const appUrl = url || path || '';\n      const processsId = open(_objectSpread({\n        url: appUrl,\n        icon,\n        name\n      }, appUrl ? {\n        appName: getAppNameByExtension(extname(appUrl))\n      } : {}), getState({\n        name\n      }), event.currentTarget);\n\n      if (processsId) {\n        foreground(processsId);\n        onChange === null || onChange === void 0 ? void 0 : onChange();\n      }\n    }\n  };\n\n  useEffect(() => {\n    getDirectory(fs, cwd, details, setEntries);\n    onChange === null || onChange === void 0 ? void 0 : onChange(cwd);\n  }, [fs, cwd]);\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, fileDropHandler), {}, {\n    children: render({\n      entries,\n      onDoubleClick,\n      cwd\n    })\n  }));\n};\n\nexport default FileManager;","map":null,"metadata":{},"sourceType":"module"}