{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport index from 'public_index.json';\nimport * as BrowserFS from 'browserfs';\nimport { createContext, useEffect, useState } from 'react';\nimport { ROOT_DIRECTORY } from '@/utils/constants';\nimport { writableJsonFs } from '@/utils/filesystem';\nexport const FileContext = /*#__PURE__*/createContext({});\n\nconst FileProvider = ({\n  children\n}) => {\n  const {\n    0: fs,\n    1: setFs\n  } = useState({});\n  useEffect(() => {\n    BrowserFS.install(window);\n    BrowserFS.configure({\n      fs: 'MountableFileSystem',\n      options: _objectSpread({}, writableJsonFs(ROOT_DIRECTORY, index))\n    }, () => {\n      setFs(BrowserFS.BFSRequire('fs'));\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(FileContext.Provider, {\n    value: fs,\n    children: children\n  });\n};\n\nexport default FileProvider;","map":null,"metadata":{},"sourceType":"module"}