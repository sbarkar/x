{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styles from '@/styles/System/FileManager/IconsView.module.scss';\nimport Icon from '@/components/System/Icon';\nimport { ClickHandler } from '@/utils/events';\nimport { desktopIconDragSettings, desktopIconMotionSettings } from '@/utils/motions';\nimport { motion } from 'framer-motion';\nimport { useRef, useState } from 'react';\n\nconst DirectyIconEntry = ({\n  icon,\n  name,\n  kind,\n  path,\n  url,\n  navRef,\n  onDoubleClick\n}) => {\n  const {\n    0: initialPosition,\n    1: setInitialPosition\n  } = useState(null);\n  const {\n    0: position,\n    1: setPosition\n  } = useState({\n    top: 0,\n    left: 0\n  });\n  const iconRef = useRef(null);\n\n  const getPosition = () => {\n    var _iconRef$current;\n\n    const {\n      top = 0,\n      left = 0\n    } = (iconRef === null || iconRef === void 0 ? void 0 : (_iconRef$current = iconRef.current) === null || _iconRef$current === void 0 ? void 0 : _iconRef$current.getBoundingClientRect()) || {};\n    const {\n      top: initialTop = 0,\n      left: initialLeft = 0\n    } = initialPosition || {};\n    return {\n      top: top - initialTop,\n      left: left - initialLeft\n    };\n  };\n\n  return /*#__PURE__*/_jsx(motion.li, _objectSpread(_objectSpread(_objectSpread({\n    drag: true,\n    layout: true,\n    dragConstraints: navRef,\n    className: styles.directoryIcon,\n    onClick: new ClickHandler({\n      doubleClick: onDoubleClick({\n        path,\n        url,\n        icon,\n        name\n      })\n    }).clickHandler,\n    onDragStart: () => !initialPosition && setInitialPosition(getPosition()),\n    onDragEnd: () => setPosition(getPosition()),\n    ref: iconRef,\n    tabIndex: -1,\n    title: `${name}${kind ? `\\r\\nType: ${kind}` : ''}`,\n    style: position\n  }, desktopIconDragSettings), desktopIconMotionSettings), {}, {\n    children: /*#__PURE__*/_jsxs(\"figure\", {\n      children: [/*#__PURE__*/_jsx(Icon, {\n        src: icon,\n        height: 42,\n        width: 42\n      }), /*#__PURE__*/_jsx(\"figcaption\", {\n        children: name\n      })]\n    })\n  }));\n};\n\nexport default DirectyIconEntry;","map":null,"metadata":{},"sourceType":"module"}