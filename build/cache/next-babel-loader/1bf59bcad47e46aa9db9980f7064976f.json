{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport WAVES from '@/public/libs/vanta.waves.min';\nimport * as THREE from 'three';\nimport Color from 'color';\nimport { MILLISECONDS_IN_SECOND } from '@/utils/constants';\nimport { useEffect } from 'react';\n\nconst wallpaperColor = h => Color(`hsl(${h}, 40%, 15%)`).rgbNumber();\n\nconst fps = 20;\nconst updateIntervalInMilliseconds = MILLISECONDS_IN_SECOND / fps;\nconst initialColor = 200;\nconst vantaJsSettings = {\n  gyroControls: false,\n  mouseControls: false,\n  touchControls: false,\n  color: wallpaperColor(initialColor),\n  shininess: 35,\n  waveHeight: 15,\n  waveSpeed: 0.25,\n  zoom: 0.95\n};\n\nconst initRainbowEffect = wallpaperEffect => {\n  let then = Date.now();\n  let base = initialColor;\n  let colorUpdateAnimationId;\n\n  const updateColor = () => {\n    const now = Date.now();\n    const delta = now - then;\n\n    if (delta > updateIntervalInMilliseconds) {\n      base = base > 360 ? 0 : base + 1;\n      then = now - delta % updateIntervalInMilliseconds;\n      /* eslint no-param-reassign: off */\n\n      wallpaperEffect.options.color = wallpaperColor(base);\n    }\n\n    colorUpdateAnimationId = requestAnimationFrame(updateColor);\n  };\n\n  colorUpdateAnimationId = requestAnimationFrame(updateColor);\n  return () => {\n    cancelAnimationFrame(colorUpdateAnimationId);\n  };\n};\n\nconst renderWallpaperEffect = ({\n  current: renderElement\n}) => {\n  const wallpaperEffect = WAVES(_objectSpread({\n    el: renderElement,\n    THREE\n  }, vantaJsSettings));\n  const cancelRainbowEffect = initRainbowEffect(wallpaperEffect);\n  wallpaperEffect.onDestroy = cancelRainbowEffect;\n  return wallpaperEffect;\n};\n\nconst useWallpaper = desktopRef => {\n  useEffect(() => {\n    const wallpaperEffect = renderWallpaperEffect(desktopRef);\n    return () => {\n      wallpaperEffect === null || wallpaperEffect === void 0 ? void 0 : wallpaperEffect.destroy();\n    };\n  }, []);\n};\n\nexport default useWallpaper;","map":null,"metadata":{},"sourceType":"module"}