{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst datePartsToObject = (acc, {\n  type,\n  value\n}) => _objectSpread(_objectSpread({}, acc), {}, {\n  [type]: value\n});\n\nconst newDateTimeFormat = options => new Intl.DateTimeFormat(process.env.locale, options);\n\nexport const formatToDate = date => newDateTimeFormat({\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric'\n}).format(date);\nexport const formatToLongDateTime = date => {\n  const {\n    month,\n    day,\n    year,\n    hour,\n    minute,\n    dayPeriod\n  } = newDateTimeFormat({\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  }).formatToParts(date).reduce(datePartsToObject, {});\n  return `${month} ${day}, ${year} at ${hour}:${minute} ${dayPeriod}`;\n};\nexport const formatToShortDateTime = date => {\n  const {\n    year,\n    month,\n    day\n  } = newDateTimeFormat({\n    year: 'numeric',\n    day: '2-digit',\n    month: '2-digit'\n  }).formatToParts(date).reduce(datePartsToObject, {});\n  return `${year}-${month}-${day}`;\n};\nexport const formatToTime = date => newDateTimeFormat({\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: true\n}).format(date);\nexport const isMidnight = (time, hour12 = true) => time === (hour12 ? '12:00:00 AM' : '00:00:00');\nexport const newDate = () => new Date();","map":null,"metadata":{},"sourceType":"module"}