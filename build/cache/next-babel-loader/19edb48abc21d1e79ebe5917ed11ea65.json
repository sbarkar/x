{"ast":null,"code":"import _toConsumableArray from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sbarkar/Documents/projects/x/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { extname } from 'path';\nimport { getFileIcon, getFileKind, getFileStat, getFormattedSize } from '@/utils/file';\nimport { parseShortcut } from '@/utils/shortcut';\nimport { ROOT_DIRECTORY } from '@/utils/constants';\n\nvar getBestIconMatch = function getBestIconMatch(icon, isDirectory, ext, filePath) {\n  if (icon) return icon;\n  return isDirectory ? '/icons/programs/explorer.png' : getFileIcon(filePath, ext);\n};\n\nexport var getDirectoryEntry = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fs, path, file, getStats) {\n    var filePath, ext, isDirectory, stats, isShortcut, _ref2, url, icon;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filePath = \"\".concat(path).concat(path === ROOT_DIRECTORY ? '' : ROOT_DIRECTORY).concat(file);\n            ext = extname(file);\n            isDirectory = !ext;\n            stats = !isDirectory && getStats ? getFileStat(filePath) : {};\n            isShortcut = !isDirectory && file.includes('.url');\n\n            if (!isShortcut) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 8;\n            return parseShortcut(fs, filePath);\n\n          case 8:\n            _context.t0 = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 11:\n            _context.t0 = {};\n\n          case 12:\n            _ref2 = _context.t0;\n            url = _ref2.url;\n            icon = _ref2.icon;\n            return _context.abrupt(\"return\", {\n              name: file.replace(ext, ''),\n              fullName: file,\n              path: filePath,\n              url: url && decodeURIComponent(url),\n              icon: getBestIconMatch(icon, isDirectory, ext, filePath),\n              size: isDirectory ? '--' : getFormattedSize(stats.size || 0),\n              kind: isDirectory ? 'Folder' : getFileKind(ext)\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getDirectoryEntry(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getDirectory = function getDirectory(fs, path, getDetails, cb) {\n  var _fs$readdir;\n\n  fs === null || fs === void 0 ? void 0 : (_fs$readdir = fs.readdir) === null || _fs$readdir === void 0 ? void 0 : _fs$readdir.call(fs, path, function (_error) {\n    var contents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    contents.reduce( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(entries, file) {\n        var newEntries;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = [];\n                _context2.t1 = _toConsumableArray;\n                _context2.next = 4;\n                return entries;\n\n              case 4:\n                _context2.t2 = _context2.sent;\n                _context2.t3 = (0, _context2.t1)(_context2.t2);\n                _context2.next = 8;\n                return getDirectoryEntry(fs, path, file, getDetails);\n\n              case 8:\n                _context2.t4 = _context2.sent;\n                _context2.t5 = [_context2.t4];\n                newEntries = _context2.t0.concat.call(_context2.t0, _context2.t3, _context2.t5);\n                cb(newEntries);\n                return _context2.abrupt(\"return\", newEntries);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }(), Promise.resolve([]));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}