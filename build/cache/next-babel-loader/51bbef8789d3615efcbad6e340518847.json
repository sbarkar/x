{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styles from '@/styles/System/WindowManager/WindowManager.module.scss';\nimport { AnimatePresence } from 'framer-motion';\nimport dynamic from 'next/dynamic';\nimport useIFrameFocuser from '@/hooks/useIFrameFocuser';\nimport { ProcessContext } from '@/contexts/ProcessManager';\nimport { useContext } from 'react';\nconst ProcessWindow = dynamic(() => import('@/components/System/WindowManager/ProcessWindow'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@/components/System/WindowManager/ProcessWindow')],\n    modules: ['@/components/System/WindowManager/ProcessWindow']\n  }\n});\n\nconst WindowManager = () => {\n  const {\n    processes\n  } = useContext(ProcessContext);\n  useIFrameFocuser();\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.windows,\n    children: /*#__PURE__*/_jsx(AnimatePresence, {\n      children: processes.map(process => /*#__PURE__*/_jsx(ProcessWindow, _objectSpread({}, process), process.id))\n    })\n  });\n};\n\nexport default WindowManager;","map":null,"metadata":{},"sourceType":"module"}